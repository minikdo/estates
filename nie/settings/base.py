"""
Django settings for nie project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import json

# Normally you should not import ANYTHING from Django directly
# into your settings, but ImproperlyConfigured is an exception.
from django.core.exceptions import ImproperlyConfigured

# JSON-based secrets module
with open('nie/settings/secrets.json') as f:
    secrets = json.loads(f.read())
    def get_secret(setting, secrets=secrets):
        '''Get the secret variable or return explicit exception.'''
        try:
            return secrets[setting]
        except KeyError:
            error_msg = 'Set the {0} environment variable'.format(setting)
            raise ImproperlyConfigured(error_msg)


    

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secret('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # my apps
    'oferty.apps.OfertyConfig',
    # third party apps
    'django.contrib.humanize',
    'crispy_forms',
    'envelope',
    'honeypot',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'nie.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'nie.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': get_secret('DB_ENGINE'),
        'NAME': get_secret('DB_NAME'),
        'USER': get_secret('DB_USER'),
        'HOST': get_secret('DB_HOST'),
        'PORT': get_secret('DB_PORT'),
    }
}
#SECRET_KEY = get_secret('SECRET_KEY')


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'pl'

TIME_ZONE = 'Europe/Warsaw'

USE_I18N = True

USE_L10N = True

USE_TZ = True

#USE_THOUSAND_SEPARATOR = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static/'),  # add STATIC_ROOT to DIRS
]

# Admin settings

ADMIN_NAME    = get_secret('ADMIN_NAME')
ADMIN_EMAIL   = get_secret('ADMIN_EMAIL')
OFFICE1_EMAIL = get_secret('OFFICE1_EMAIL')
OFFICE2_EMAIL = get_secret('OFFICE2_EMAIL')
SERVER_EMAIL  = get_secret('SERVER_EMAIL')

DEFAULT_FROM_EMAIL = SERVER_EMAIL
SERVER_EMAIL = SERVER_EMAIL

ADMINS = [(ADMIN_NAME, ADMIN_EMAIL)]


# Third party apps settings

# Crispy forms

CRISPY_TEMPLATE_PACK = 'bootstrap3'

# Envelope

ENVELOPE_EMAIL_RECIPIENTS = [ADMIN_EMAIL]

ENVELOPE_EMAIL_RECIPIENTS_MAP = {1: [OFFICE1_EMAIL, ADMIN_EMAIL],
                                 2: [OFFICE2_EMAIL, ADMIN_EMAIL]}

# Honeypot

HONEYPOT_FIELD_NAME = get_secret('HP_FIELDNAME')
HONEYPOT_VALUE = get_secret('HP_VALUE')



